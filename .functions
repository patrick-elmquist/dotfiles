# -------------------------------------------------
# Echo the absolute path to the given file
#
# $1 - filename
#
# Example: abs image.png
# -------------------------------------------------
abs-path() {
    echo "$(pwd)/$1"
}

# -------------------------------------------------
# Check if the current shell is started via VIM
#
# Example: is-vim
# -------------------------------------------------
is-vim(){
    is_vim="$(env | grep VIMRUNTIME)"
    if [ -z "$is_vim" ]; then
        echo "No"
    else
        echo "Yes"
    fi
}

# -------------------------------------------------
# Take a screenshot of the connected device
#
# $1 - filename (optional, default=screenshot.png)
# $2 - device (optionl, default=d)
#      d = device
#      e = emulator
#
# Example: cap before.png
# -------------------------------------------------
cap() {
    filename="${1:-screenshot.png}"
    device="${2:-d}"

    case $filename in
        *.png|.PNG) ;;
        *) filename="$1.png" ;;
    esac

    # TODO: Make it possible to prefer emulator or real device
    adb -$device exec-out screencap -p > $filename;

    open $filename
}

# -------------------------------------------------
# Tile two or more images into one.
#
# $2-6 - images to tile
#
# Example: tile before.png after.png
# -------------------------------------------------
tile() {
    filename="tile.png"
    case $# in
        2) pattern="2x1" ;;
        3) pattern="3x1" ;;
        4) pattern="2x2" ;;
        5) pattern="3x2" ;;
        6) pattern="3x2" ;;
        *) echo "Unsupported number of images: $#" && return 0 ;;
    esac

    montage -geometry +100+100 \
        -border 2 \
        -bordercolor grey \
        -background grey90 \
        -tile "$pattern" \
        "$@" \
        "$filename"

    open $filename;
}

# -------------------------------------------------
# Echo the contents of a table in Sqlite on a
# connected device.
#
# $1 - app package name
# $2 - name of the database
# $3 - name of the table
#
# Example: echo-table com.demo.app db users
# -------------------------------------------------
echo-table() {
    db="databases/$2"
    query="SELECT * FROM $3;"
    adb exec-out run-as "$1" sqlite3 -echo -header -column "$db" "$query"
}

# -------------------------------------------------
# Watch the contents of a table in Sqlite on a
# connected device. Updates every 5s.
#
# $1 - app package name
# $2 - name of the database
# $3 - name of the table
#
# Example: watch-table com.demo.app db users
# -------------------------------------------------
watch-table() {
    while true; do clear; echo-table "$@"; sleep 5; done
}

# -------------------------------------------------
# Fetch the database from a connected device.
#
# $1 - app package name
# $2 - name of the database
#
# Example: fetch-db com.demo.app db
# -------------------------------------------------
fetch-db() {
    adb exec-out run-as "$1" cat databases/"$2" > ~/Temp/app.db;
    adb exec-out run-as "$1" cat databases/"$2"-wal > ~/Temp/app.db-wal;
    adb exec-out run-as "$1" cat databases/"$2"-shm > ~/Temp/app.db-shm;
    sqlite3 ~/Temp/app.db
}

# -------------------------------------------------
# Dump the view hierarchy of the connected device
# or emulator using UiAutomator. Formats xml using
# xmllint.
#
# Note: doesn't seem to work on regular, non
#       debuggable devices...
#
# $1 - filename (default:view-hierarchy)
#
# Example: dump-view-hierarchy dump
# -------------------------------------------------
dump-view-hierarchy() {
    filename=${1:-"view-hierarchy"}
    filename="$filename.xml"

    adb shell uiautomator dump --verbose
    adb pull /sdcard/window_dump.xml
    adb shell rm /sdcard/window_dump.xml

    xmllint --format window_dump.xml > "$filename"
    rm window_dump.xml

    $EDITOR "$filename"
 }

# -------------------------------------------------
# Extract the given archive
#
# $1 - the archive
#
# Example: extract archive.zip
# -------------------------------------------------
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xvjf $1   ;;
            *.tar.gz)   tar xvzf $1   ;;
            *.bz2)      bunzip2 $1    ;;
            *.rar)      unrar x $1    ;;
            *.gz)       gunzip $1     ;;
            *.tar)      tar xvf $1    ;;
            *.tbz2)     tar xvjf $1   ;;
            *.tgz)      tar xvzf $1   ;;
            *.zip)      unzip $1      ;;
            *.Z)        uncompress $1 ;;
            *.7z)       7z x $1       ;;
            *)          echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}

# -------------------------------------------------
# Start a repo branch with week nbr and day, like:
#   w48.1.Important.Feature
#
# $1 - branch name
#
# Example: repo-start Important.Feature
# -------------------------------------------------
repo-start() {
    week_nbr=$(date +%V)
    day_nbr=$(date +%u)
    repo start "w${week_nbr}.${day_nbr}.$1" .
}

# -------------------------------------------------
# Create a .gif of the given .mp4 file
# Based on this Giphy article:
# https://engineering.giphy.com/how-to-make-gifs-with-ffmpeg/
#
# $1 - the .mp4 file
# $2 - (Optional) name of output
#
# Example: gifit recording.mp4 my.gif
# -------------------------------------------------
gifit() {
    output=${2:-"output.gif"}
    ffmpeg -ss 10 -i $1 -filter:v "crop=in_w:in_h/3:0:215" -c:a copy video1.mp4
    ffmpeg -ss 10 -i $1 -filter:v "crop=in_w:in_h/3:0:1305" -c:a copy video2.mp4
    ffmpeg -i video1.mp4 -filter_complex "[0:v] fps=30,scale=480:-1,split [a][b];[a] palettegen [p];[b][p] paletteuse" output1.gif
    ffmpeg -i video2.mp4 -filter_complex "[0:v] fps=30,scale=480:-1,split [a][b];[a] palettegen [p];[b][p] paletteuse" output2.gif
}

# -------------------------------------------------
# Loop a command N number of times.
#
# $1   - the count
# $@:2 - the command to loop
#
# Example: loop 5 echo "Something"
# -------------------------------------------------
loop() {
    for i in $(seq 1 $1); do
        eval "${@:2}"
        sleep 0.15
    done;
}

# Android KeyEvent codes
DPAD_LEFT=21
DPAD_DOWN=20
DPAD_UP=19
DPAD_RIGHT=22
DPAD_CENTER=23
ENTER=66
BACK=4

# -------------------------------------------------
# Poke the system properties to have changes take
# effect on the connected device or emulator
#
# Example: adb_poke_system_properties
# -------------------------------------------------
adb_poke_system_properties() {
    # Poke SystemProperties for the change to have effect
    SYSPROPS_TRANSACTION=1599295570
    adb shell service call activity "$SYSPROPS_TRANSACTION" &>/dev/null
}

# -------------------------------------------------
# Enable or disable layout bounds for the connected
# device or emulator
#
# $1 - true or false (default:true)
#
# Example: adb-layout-bounds true
# -------------------------------------------------
adb-layout-bounds() {
    adb shell setprop debug.layout "${1:-true}"
    adb_poke_system_properties
}

# -------------------------------------------------
# Enable or disable overdraw for the connected
# device or emulator
#
# $1 - show or false (default:show)
#
# Example: adb-overdraw show
# -------------------------------------------------
adb-overdraw() {
    adb shell setprop debug.hwui.overdraw "${1:-show}"
    adb_poke_system_properties
}

# -------------------------------------------------
# Enable or disable hwui bars for the connected
# device or emulator
#
# $1 - visual_bars or false (default:visual_bars)
#
# Example: adb-hwui visual_bars
# -------------------------------------------------
adb-hwui() {
    adb shell setprop debug.hwui.profile "${1:-visual_bars}"
    adb_poke_system_properties
}

# -------------------------------------------------
# Send text input to a connected device or emulator
#
# $1 - the text
#
# Example: adb-text This is my "input"
# -------------------------------------------------
adb-text() {
    text=$(printf '%s%%s' ${@})  # concatenate and replace spaces with %s
    text=${text%%%s}  # remove the trailing %s
    text=${text//\'/\\\'}  # escape single quotes
    text=${text//\"/\\\"}  # escape double quotes
    adb shell input text "$text"
}

# -------------------------------------------------
# Send text input to a connected device or emulator
# and finish it of by sending Enter.
#
# $1 - the text
#
# Example: adb-text-enter This is my "input"
# -------------------------------------------------
adb-text-enter() {
    adb-text $@ && adb-key ENTER
}

# -------------------------------------------------
# Send key input to a connected device or emulator
#
# $1 - the keyevent, check KeyEvent for valid codes
#
# Example: adb-key 67
# -------------------------------------------------
adb-key() {
    adb shell input keyevent "$1"
}

# -------------------------------------------------
# Emulating a dpad, translating keys to DPAD events
# and sending them to a connected ADB device.
#
# - HJKL     = DPAD left,down,up,right
# - Enter    = DPAD center
# - SPC,BSPC = Back
# - ESC,Q    = Quit
#
# Example: adbkey-dpad
# -------------------------------------------------
adb-dpad() {
    echo "Starting a DPAD session, press Q or ESC to stop..."
    echo "Navigation:"
    echo "<HJKL> to move left,down,up,right"
    echo "<Enter> to select"
    echo "<Spc,Bspc> to go back"
    stty -echo
    while :
    do
        read -sk key
        case $key in
            h|H)             adb-key DPAD_LEFT   ;;
            j|J)             adb-key DPAD_DOWN   ;;
            k|K)             adb-key DPAD_UP     ;;
            l|L)             adb-key DPAD_RIGHT  ;;
            q|Q|$'\e')       break               ;; # q,esc
            $'\x0a')         adb-key DPAD_CENTER ;; # enter
            $'\x20'|$'\177') adb-key BACK        ;; # spc,bspc
        esac
    done
    stty echo
}

# -------------------------------------------------
# Screen record the connected device or emulator
#
# Example: adb-rec name
# -------------------------------------------------
fun adb-rec() {
    filename="${1:-screenrecord.mp4}"

    case $filename in
        *.mp4|.MP4) ;;
        *) filename="$1.mp4" ;;
    esac

    echo "Starting screen record, press Ctrl + C to stop..."
    trap '{ echo "Stopped, wrapping up..." ; }' SIGINT
    adb shell screenrecord /sdcard/Download/recording.mp4
    trap - SIGINT
    sleep 3

    echo "Pulling file from device..."
    adb pull /sdcard/Download/recording.mp4 ./
    echo "Removing file on device..."
    adb shell rm /sdcard/Download/recording.mp4

    mv recording.mp4 "$filename"
}


# -------------------------------------------------
# Create a new branch in the following format:
#   ABCD-XXXX-Feature_description
#
# $1 - JIRA issue number ABCD-XXXX
# $2 - Issue description
#
# Example:
# new-feature-branch ABCD-1337 A good description
# Branch: ABCD-1337_A_good_description
#
# Prepopulates the branch with an empty commit
# with the following message:
# ABCD-XXXX A good description
#
# Jira: ABCD-XXXX
# -------------------------------------------------
fun generic-new-feature() {
    jira="${1?"Need a Jira number"}"

    git fetch --all --prune

    args=$(printf '%s_' ${@:2} | sed 's/.$//')
    branch_name="$jira-$args"

    git checkout origin/main -b "$branch_name"

    title="$jira ${@:2}"
    content="Jira: $jira"
    git commit --allow-empty -m "$title" -m "$content"
}

# -------------------------------------------------
# Convert the current branch to a feature branch
#   ABCD-XXXX-Feature_description
#
# $1 - JIRA issue number ABCD-XXXX
# $2 - Issue description
#
# Example:
# new-feature-branch ABCD-1337 A good description
# Branch: ABCD-1337_A_good_description
#
# Squash all commits.
#
# Amends the commit with the following title and message:
# ABCD-XXXX A good description
#
# Jira: ABCD-XXXX
# -------------------------------------------------
fun generic-to-feature() {
    if [[ `git status --porcelain` ]]; then
        echo "Commit changes before running..."
    else
        jira="${1?"Need a Jira number"}"

        git fetch --all --prune

        // Create the new branch
        args=$(printf '%s_' ${@:2} | sed 's/.$//')
        branch_name="$jira-$args"
        git checkout -b "$branch_name"

        // Squash it
        git rebase -i origin/main

        // Amend the first commit with Jira info
        title="$jira ${@:2}"
        content="Jira: $jira"
        git commit --amend -m "$title" -m "$content"
    fi
}

