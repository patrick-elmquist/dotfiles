# -------------------------------------------------
# Echo the absolute path to the given file
#
# $1 - filename
#
# Example: abs image.png
# -------------------------------------------------
abs-path() {
    echo "$(pwd)/$1"
}

# -------------------------------------------------
# Take a screenshot of the connected device
#
# $1 - filename (optional, default=screenshot.png)
#
# Example: cap before.png
# -------------------------------------------------
cap() {
    filename="${1:-screenshot.png}"

    case $filename in
        *.png|.PNG) ;;
        *) filename="$1.png" ;;
    esac

    # TODO: Make it possible to prefer emulator or real device
    adb exec-out screencap -p > $filename;

    open $filename
}


# -------------------------------------------------
# Tile two or more images into one.
#
# $2-6 - images to tile
#
# Example: tile before.png after.png
# -------------------------------------------------
tile() {
    filename="tile.png"
    case $# in
        2) pattern="2x1" ;;
        3) pattern="3x1" ;;
        4) pattern="2x2" ;;
        5) pattern="3x2" ;;
        6) pattern="3x2" ;;
        *) echo "Unsupported number of images: $#" && return 0 ;;
    esac

    montage -geometry +100+100 \
        -border 2 \
        -bordercolor grey \
        -background grey90 \
        -tile "$pattern" \
        "$@" \
        "$filename"

    open $filename;
}


# -------------------------------------------------
# Echo the contents of a table in Sqlite on a
# connected device.
#
# $1 - app package name
# $2 - name of the database
# $3 - name of the table
#
# Example: echo-table com.demo.app db users
# -------------------------------------------------
echo-table() {
    db="databases/$2"
    query="SELECT * FROM $3;"
    adb exec-out run-as "$1" sqlite3 -echo -header -column "$db" "$query"
}

# -------------------------------------------------
# Watch the contents of a table in Sqlite on a
# connected device. Updates every 5s.
#
# $1 - app package name
# $2 - name of the database
# $3 - name of the table
#
# Example: watch-table com.demo.app db users
# -------------------------------------------------
watch-table() {
    while true; do clear; echo-table "$@"; sleep 5; done
}


# -------------------------------------------------
# Fetch the database from a connected device.
#
# $1 - app package name
# $2 - name of the database
#
# Example: fetch-db com.demo.app db
# -------------------------------------------------
fetch-db() {
    adb exec-out run-as "$1" cat databases/"$2" > ~/Temp/app.db;
    adb exec-out run-as "$1" cat databases/"$2"-wal > ~/Temp/app.db-wal;
    adb exec-out run-as "$1" cat databases/"$2"-shm > ~/Temp/app.db-shm;
    sqlite3 ~/Temp/app.db
}


# -------------------------------------------------
# Enable or disable layout bounds of the connected
# device or emulator
#
# $1 - true or false (default:true)
#
# Example: enable-layout-bounds true
# -------------------------------------------------
enable-layout-bounds() {
    adb shell setprop debug.layout "${1:-true}"

    # Poke SystemProperties for the change to have effect
    SYSPROPS_TRANSACTION=1599295570
    adb shell service call activity "$SYSPROPS_TRANSACTION" &>/dev/null
}


# -------------------------------------------------
# Dump the view hierarchy of the connected device
# or emulator using UiAutomator. Formats xml using
# xmllint.
#
# $1 - filename (default:view-hierarchy)
#
# Example: dump-view-hierarchy dump
# -------------------------------------------------
dump-view-hierarchy() {
    filename=${1:-"view-hierarchy.xml"}
    filename="$filename.xml"

    adb shell uiautomator dump --verbose
    adb pull /sdcard/window_dump.xml
    adb shell rm /sdcard/window_dump.xml

    xmllint --format window_dump.xml > "$filename"
    rm window_dump.xml

    $EDITOR "$filename"
 }


# -------------------------------------------------
# Extract the given archive
#
# $1 - the archive
#
# Example: extract archive.zip
# -------------------------------------------------
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xvjf $1   ;;
            *.tar.gz)   tar xvzf $1   ;;
            *.bz2)      bunzip2 $1    ;;
            *.rar)      unrar x $1    ;;
            *.gz)       gunzip $1     ;;
            *.tar)      tar xvf $1    ;;
            *.tbz2)     tar xvjf $1   ;;
            *.tgz)      tar xvzf $1   ;;
            *.zip)      unzip $1      ;;
            *.Z)        uncompress $1 ;;
            *.7z)       7z x $1       ;;
            *)          echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}


# -------------------------------------------------
# Start a repo branch with week nbr and day, like:
#   w48.1.Important.Feature
#
# $1 - branch name
#
# Example: repo-start Important.Feature
# -------------------------------------------------
repo-start() {
    week_nbr=$(date +%V)
    day_nbr=$(date +%u)
    repo start "w${week_nbr}.${day_nbr}.$1" .
}


# -------------------------------------------------
# Create a .gif of the given .mp4 file
# Based on this Giphy article:
# https://engineering.giphy.com/how-to-make-gifs-with-ffmpeg/
#
# $1 - the .mp4 file
# $2 - (Optional) name of output
#
# Example: gifit recording.mp4 my.gif
# -------------------------------------------------
gifit() {
    output=${2:-"output.gif"}
    ffmpeg -i $1 -filter_complex "[0:v] fps=12,scale=480:-1,split [a][b];[a] palettegen [p];[b][p] paletteuse" $output
}

# -------------------------------------------------
# Loop a command N number of times.
#
# $1   - the count
# $@:2 - the command to loop
#
# Example: loop 5 echo "Something"
# -------------------------------------------------
loop() {
    for i in $(seq 1 $1); do
        eval "${@:2}"
        sleep 0.15
    done;
}

# -------------------------------------------------
# Send text input to a connected device or emulator
#
# $1 - the text
#
# Example: adbtext This is my "input"
# -------------------------------------------------
adbtext() {
    text=$(printf '%s%%s' ${@})  # concatenate and replace spaces with %s
    text=${text%%%s}  # remove the trailing %s
    text=${text//\'/\\\'}  # escape single quotes
    text=${text//\"/\\\"}  # escape double quotes
    adb shell input text "$text"
}

# -------------------------------------------------
# Send text input to a connected device or emulator
# and finish it of by sending Enter.
#
# $1 - the text
#
# Example: adbtext-text This is my "input"
# -------------------------------------------------
adbtext-enter() {
    adbtext $@ && adbkey 66
}

# -------------------------------------------------
# Send key input to a connected device or emulator
#
# $1 - the keyevent, check KeyEvent for valid codes
#
# Example: adbkey 67
# -------------------------------------------------
adbkey() {
    adb shell input keyevent "$1"
}
