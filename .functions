# -------------------------------------------------
# Take a screenshot of the connected device
#
# $1 - filename (optional, default=screenshot.png)
#
# Example: cap before.png
# -------------------------------------------------
cap() {
    filename="${1:-screenshot.png}"

    case $filename in
        *.png|.PNG) ;;
        *) filename="$1.png" ;;
    esac

    # TODO: Make it possible to prefer emulator or real device
    adb exec-out screencap -p > $filename;

    open $filename
}


# -------------------------------------------------
# Tile two or more images into one.
#
# $2-6 - images to tile
#
# Example: tile before.png after.png
# -------------------------------------------------
tile() {
    filename="tile.png"
    case $# in
        2) pattern="2x1" ;;
        3) pattern="3x1" ;;
        4) pattern="4x1" ;;
        5) pattern="3x2" ;;
        6) pattern="3x2" ;;
        *) echo "Unsupported number of images: $#" && return 0 ;;
    esac

    montage -geometry +100+100 \
        -border 2 \
        -bordercolor grey \
        -background grey90 \
        -tile "$pattern" \
        "$@" \
        "$filename"

    open $filename;
}


# -------------------------------------------------
# Echo the contents of a table in Sqlite on a
# connected device.
#
# $1 - app package name
# $2 - name of the database
# $3 - name of the table
#
# Example: echo-table com.demo.app db users
# -------------------------------------------------
echo-table() {
    db="databases/$2"
    query="SELECT * FROM $3;"
    adb exec-out run-as "$1" sqlite3 -echo -header -column "$db" "$query"
}

# -------------------------------------------------
# Watch the contents of a table in Sqlite on a
# connected device. Updates every 5s.
#
# $1 - app package name
# $2 - name of the database
# $3 - name of the table
#
# Example: watch-table com.demo.app db users
# -------------------------------------------------
watch-table() {
    while true; do clear; echo-table "$@"; sleep 5; done
}


# -------------------------------------------------
# Fetch the database from a connected device.
#
# $1 - app package name
# $2 - name of the database
#
# Example: fetch-db com.demo.app db
# -------------------------------------------------
fetch-db() {
    adb exec-out run-as "$1" cat databases/"$2" > ~/Temp/app.db;
    adb exec-out run-as "$1" cat databases/"$2"-wal > ~/Temp/app.db-wal;
    adb exec-out run-as "$1" cat databases/"$2"-shm > ~/Temp/app.db-shm;
    sqlite3 ~/Temp/app.db
}

# -------------------------------------------------
# Extract the given archive
#
# $1 - the archive
#
# Example: extract archive.zip
# -------------------------------------------------
extract() {
    if [ -f $1 ] ; then
        case $1 in
            *.tar.bz2)  tar xvjf $1   ;;
            *.tar.gz)   tar xvzf $1   ;;
            *.bz2)      bunzip2 $1    ;;
            *.rar)      unrar x $1    ;;
            *.gz)       gunzip $1     ;;
            *.tar)      tar xvf $1    ;;
            *.tbz2)     tar xvjf $1   ;;
            *.tgz)      tar xvzf $1   ;;
            *.zip)      unzip $1      ;;
            *.Z)        uncompress $1 ;;
            *.7z)       7z x $1       ;;
            *)          echo "don't know how to extract '$1'..." ;;
        esac
    else
        echo "'$1' is not a valid file!"
    fi
}
